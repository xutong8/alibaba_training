{"version":3,"sources":["components/Panel/index.module.scss","components/Main/index.module.scss","components/BarChart/index.module.scss","services/index.ts","constants/index.ts","components/CustomTable/columns.tsx","components/CustomTable/index.tsx","components/BarChart/index.tsx","pages/Github/index.tsx","components/Main/index.tsx","components/Panel/index.tsx","App.tsx","reportWebVitals.ts","index.tsx","pages/Github/index.module.scss"],"names":["module","exports","instance","axios","create","baseURL","timeout","httpRequest","url","config","Promise","resolve","reject","get","then","res","catch","err","LANGUAGES","DESC_ORDER","ORDERS","SORTS","columns","title","dataIndex","key","render","html_url","href","CustomTable","props","dataSource","total","page","onChange","rowKey","item","id","pagination","current","showSizeChanger","BarChart","containerId","xField","yField","chartRef","useRef","useEffect","columnPlot","Column","data","label","position","style","fill","opacity","xAxis","autoRotate","autoHide","length","changeData","className","styles","bar","Option","Select","Github","useState","language","setLanguage","order","setOrder","sort","setSort","setDataSource","setTotal","setPage","fetchRepositories","a","items","total_count","github","header","select","desc","value","map","table","name","stars","stargazers_count","forks","open_issues","Main","main","path","element","Panel","dataset","Date","setValue","interval","setInterval","clearInterval","panel","time","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.469036a1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Panel_block__1n9WU\",\"panel\":\"Panel_panel__1ETJq\",\"select\":\"Panel_select__a4ilz\",\"desc\":\"Panel_desc__1a-si\",\"time\":\"Panel_time__2ODaL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Main_block__5jKZM\",\"main\":\"Main_main__2Dwl5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bar\":\"BarChart_bar__1E7mZ\",\"container\":\"BarChart_container__1RZ75\"};","import axios, { AxiosRequestConfig } from \"axios\";\n\nconst BASE_URL = \"https://api.github.com/\";\n\nconst TIME_OUT = 10000;\n\nconst instance = axios.create({\n  baseURL: BASE_URL,\n  timeout: TIME_OUT,\n});\n\nconst httpRequest = {\n  get(url: string, config?: AxiosRequestConfig) {\n    return new Promise((resolve, reject) => {\n      instance\n        .get(url, config ?? {})\n        .then((res) => resolve(res))\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  },\n  post(url: string, data?: any, config?: AxiosRequestConfig) {\n    return new Promise((resolve, reject) => {\n      instance\n        .post(url, data, config ?? {})\n        .then((res) => resolve(res))\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  },\n};\n\nexport { httpRequest };\n","export const DEFAULT_DATA_SET = \"github\";\n\nexport const DEFAULT_LANGUAGE = \"python\";\n\nexport const LANGUAGES = [\"python\", \"java\", \"javascript\"];\n\nexport const ASC_ORDER = \"asc\";\nexport const DESC_ORDER = \"desc\";\nexport const ORDERS = [ASC_ORDER, DESC_ORDER];\n\nexport const DEFAULT_SORT = \"stars\";\nexport const SORTS = [\"stars\", \"forks\"];\n","export const columns = [\n  {\n    title: \"id\",\n    dataIndex: \"id\",\n    key: \"id\",\n  },\n  {\n    title: \"name\",\n    dataIndex: \"name\",\n    key: \"name\",\n  },\n  {\n    title: \"html_url\",\n    dataIndex: \"html_url\",\n    key: \"html_url\",\n    render: (html_url: string) => <a href={html_url}>{html_url}</a>,\n  },\n  {\n    title: \"created_at\",\n    dataIndex: \"created_at\",\n    key: \"created_at\",\n  },\n  {\n    title: \"updated_at\",\n    dataIndex: \"updated_at\",\n    key: \"updated_at\",\n  },\n  {\n    title: \"pushed_at\",\n    dataIndex: \"pushed_at\",\n    key: \"pushed_at\",\n  },\n];\n","import React from \"react\";\nimport styles from \"./index.module.scss\";\nimport { columns } from \"./columns\";\nimport { Table } from \"antd\";\n\nexport interface ICustomTableProps {\n  // TODO: 定义类型\n  dataSource: any[];\n  total: number;\n  page: number;\n  onChange: (page: number) => void;\n}\n\nconst CustomTable: React.FC<ICustomTableProps> = (props) => {\n  const { dataSource, total, page, onChange } = props;\n  return (\n    <Table\n      columns={columns}\n      dataSource={dataSource}\n      rowKey={(item) => item.id}\n      pagination={{\n        total,\n        current: page,\n        showSizeChanger: false,\n        onChange,\n      }}\n    />\n  );\n};\n\nexport default CustomTable;\n","import React, { useEffect, useRef } from \"react\";\nimport styles from \"./index.module.scss\";\nimport { Column } from \"@antv/g2plot\";\n\nexport interface IBarChartProps {\n  // TODO: 定义类型\n  containerId: string;\n  dataSource: any[];\n  xField: string;\n  yField: string;\n}\n\nconst BarChart: React.FC<IBarChartProps> = (props) => {\n  const { containerId, dataSource, xField, yField } = props;\n\n  const chartRef = useRef<any>(null);\n\n  useEffect(() => {\n    const columnPlot = new Column(containerId, {\n      data: dataSource,\n      xField,\n      yField,\n      label: {\n        // 可手动配置 label 数据标签位置\n        position: \"middle\", // 'top', 'bottom', 'middle',\n        // 配置样式\n        style: {\n          fill: \"#FFFFFF\",\n          opacity: 0.6,\n        },\n      },\n      xAxis: {\n        label: {\n          autoRotate: false,\n          autoHide: false,\n        },\n      },\n    });\n    columnPlot.render();\n    chartRef.current = columnPlot;\n  }, []);\n\n  useEffect(() => {\n    if (dataSource.length === 0) return;\n    chartRef.current?.changeData(dataSource);\n  }, [dataSource]);\n\n  return <div className={styles.bar} id={containerId}></div>;\n};\n\nexport default BarChart;\n","import React, { useEffect, useState } from \"react\";\nimport styles from \"./index.module.scss\";\nimport { httpRequest } from \"@/services\";\nimport {\n  DEFAULT_LANGUAGE,\n  DEFAULT_SORT,\n  DESC_ORDER,\n  LANGUAGES,\n  ORDERS,\n  SORTS,\n} from \"@/constants\";\nimport { Select } from \"antd\";\nimport CustomTable from \"@/components/CustomTable\";\nimport BarChart from \"@/components/BarChart\";\n\nconst { Option } = Select;\n\nconst Github = () => {\n  // 默认找Python项目\n  const [language, setLanguage] = useState<string>(DEFAULT_LANGUAGE);\n  // 升序降序\n  const [order, setOrder] = useState<string>(DESC_ORDER);\n  // 搜索规则\n  const [sort, setSort] = useState<string>(DEFAULT_SORT);\n\n  const [dataSource, setDataSource] = useState<any[]>([]);\n  const [total, setTotal] = useState<number>(0);\n  const [page, setPage] = useState<number>(1);\n\n  // language change\n  const handleLanguageChange = (language: string) => {\n    setLanguage(language);\n  };\n\n  // order change\n  const handleOrderChange = (order: string) => {\n    setOrder(order);\n  };\n\n  // sort change\n  const handleSortChange = (sort: string) => {\n    setSort(sort);\n  };\n\n  // page change\n  const handlePageChange = (page: number) => {\n    setPage(page);\n  };\n\n  // 找出Github上星级最高的项目\n  const fetchRepositories = async () => {\n    const res = (await httpRequest.get(\n      `/search/repositories?q=language:${language}&sort=${sort}&order=${order}&per_page=10&page=${page}`\n    )) as any;\n\n    setDataSource(res?.data?.items ?? []);\n    setTotal(res?.data?.total_count ?? 0);\n  };\n\n  // 拉取仓库\n  useEffect(() => {\n    fetchRepositories();\n  }, [language, order, sort, page]);\n\n  return (\n    <div className={styles.github}>\n      <div className={styles.header}>\n        <div className={styles.select}>\n          <span className={styles.desc}>语言：</span>\n          <Select value={language} onChange={handleLanguageChange}>\n            {LANGUAGES.map((item) => (\n              <Option key={item} value={item}>\n                {item}\n              </Option>\n            ))}\n          </Select>\n        </div>\n        <div className={styles.select}>\n          <span className={styles.desc}>升序/降序：</span>\n          <Select value={order} onChange={handleOrderChange}>\n            {ORDERS.map((item) => (\n              <Option key={item} value={item}>\n                {item}\n              </Option>\n            ))}\n          </Select>\n        </div>\n        <div className={styles.select}>\n          <span className={styles.desc}>排序规则：</span>\n          <Select value={sort} onChange={handleSortChange}>\n            {SORTS.map((item) => (\n              <Option key={item} value={item}>\n                {item}\n              </Option>\n            ))}\n          </Select>\n        </div>\n      </div>\n      <div className={styles.table}>\n        <CustomTable\n          dataSource={dataSource}\n          page={page}\n          total={total}\n          onChange={handlePageChange}\n        />\n      </div>\n      <div className={styles.bar}>\n        <BarChart\n          dataSource={dataSource.map((item) => ({\n            name: item?.name ?? \"\",\n            stars: item?.stargazers_count ?? 0,\n          }))}\n          xField=\"name\"\n          yField=\"stars\"\n          containerId=\"starId\"\n        />\n      </div>\n      <div className={styles.bar}>\n        <BarChart\n          dataSource={dataSource.map((item) => ({\n            name: item?.name ?? \"\",\n            forks: item?.forks ?? 0,\n          }))}\n          xField=\"name\"\n          yField=\"forks\"\n          containerId=\"forkId\"\n        />\n      </div>\n      <div className={styles.bar}>\n        <BarChart\n          dataSource={dataSource.map((item) => ({\n            name: item?.name ?? \"\",\n            open_issues: item?.open_issues ?? 0,\n          }))}\n          xField=\"name\"\n          yField=\"open_issues\"\n          containerId=\"issueId\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Github;\n","import React from \"react\";\nimport styles from \"./index.module.scss\";\nimport { Routes, Route } from \"react-router-dom\";\nimport Github from \"@/pages/Github\";\n\nconst Main = () => {\n  return (\n    <div className={styles.main}>\n      <Routes>\n        <Route path=\"/github\" element={<Github />} />\n        <Route path=\"/\" element={<Github />} />\n      </Routes>\n    </div>\n  );\n};\n\nexport default Main;\n","import React, { useEffect, useState } from \"react\";\nimport styles from \"./index.module.scss\";\nimport { Select } from \"antd\";\nimport { DEFAULT_DATA_SET } from \"@/constants\";\nimport Clock from \"react-clock\";\n\nconst { Option } = Select;\n\nconst Panel = () => {\n  const handleChange = () => {};\n\n  // 当前的数据集\n  const [dataset, setDataset] = useState<string>(DEFAULT_DATA_SET);\n\n  const [value, setValue] = useState(new Date());\n\n  useEffect(() => {\n    const interval = setInterval(() => setValue(new Date()), 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  return (\n    <div className={styles.panel}>\n      <div className={styles.select}>\n        <span className={styles.desc}>数据集：</span>\n        <Select value={dataset} onChange={handleChange}>\n          <Option value=\"github\">Github</Option>\n        </Select>\n      </div>\n      <div className={styles.time}>\n        <Clock value={value} />\n      </div>\n    </div>\n  );\n};\n\nexport default Panel;\n","import React from \"react\";\nimport \"./App.css\";\nimport Main from \"./components/Main\";\nimport Panel from \"./components/Panel\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Panel />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"antd/dist/antd.css\";\nimport \"react-clock/dist/Clock.css\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"github\":\"Github_github__3MEdq\",\"header\":\"Github_header__1EGIs\",\"desc\":\"Github_desc__3LyVN\",\"select\":\"Github_select__2tDtv\",\"table\":\"Github_table__3e4C-\",\"bar\":\"Github_bar__M5GKK\"};"],"sourceRoot":""}